import { Advice } from './ai'
import { ChecksResultWithNotes } from './checks'
import { LighthouseMetrics } from './lighthouse'

export type ReportData = {
  id: string
  siteUrl: string
  createdAt: Date
  score: number
  rawMeta: Record<string, unknown>
  checks: ChecksResultWithNotes
  aiAdvice: Advice
  lighthouse?: LighthouseMetrics | null
}

export function generateMarkdown(report: ReportData): string {
  const date = new Date(report.createdAt).toLocaleString()

  let md = `# SEO Audit Report\n\n`
  md += `**URL:** ${report.siteUrl}\n`
  md += `**Date:** ${date}\n`
  md += `**Score:** ${report.score}/100\n\n`

  md += `---\n\n`

  // Checks Section
  md += `## Technical Checks\n\n`
  const checkLabels: Record<string, string> = {
    title_length_ok: 'Title Length (50-60 chars)',
    meta_description_ok: 'Meta Description (120-160 chars)',
    canonical_present: 'Canonical URL Present',
    robots_allows_index: 'Robots Allow Indexing',
    single_h1: 'Single H1 Tag',
    image_alt_coverage: 'Image Alt Coverage (80%+)',
    og_present: 'Open Graph Tags Present',
    twitter_present: 'Twitter Card Tags Present',
    schema_present: 'Schema.org Markup Present',
  }

  for (const [key, label] of Object.entries(checkLabels)) {
    const passed = report.checks[key as keyof ChecksResultWithNotes]
    const note = report.checks.notes?.[key]
    const icon = passed ? '✅' : '⚠️'
    md += `- ${icon} **${label}**`
    if (note) {
      md += ` - ${note}`
    }
    md += `\n`
  }

  md += `\n---\n\n`

  // Lighthouse Section
  if (report.lighthouse) {
    md += `## Lighthouse Metrics\n\n`

    md += `### Scores\n\n`
    md += `| Category | Score |\n`
    md += `|----------|-------|\n`
    md += `| ⚡ Performance | ${report.lighthouse.scores.performance}/100 |\n`
    md += `| ♿ Accessibility | ${report.lighthouse.scores.accessibility}/100 |\n`
    md += `| ✓ Best Practices | ${report.lighthouse.scores.bestPractices}/100 |\n`
    md += `| 🔍 SEO | ${report.lighthouse.scores.seo}/100 |\n\n`

    md += `### Core Web Vitals\n\n`
    md += `| Metric | Value |\n`
    md += `|--------|-------|\n`
    if (report.lighthouse.metrics.firstContentfulPaint) {
      md += `| First Contentful Paint | ${(report.lighthouse.metrics.firstContentfulPaint / 1000).toFixed(2)}s |\n`
    }
    if (report.lighthouse.metrics.largestContentfulPaint) {
      md += `| Largest Contentful Paint | ${(report.lighthouse.metrics.largestContentfulPaint / 1000).toFixed(2)}s |\n`
    }
    if (report.lighthouse.metrics.cumulativeLayoutShift !== undefined) {
      md += `| Cumulative Layout Shift | ${report.lighthouse.metrics.cumulativeLayoutShift.toFixed(3)} |\n`
    }
    if (report.lighthouse.metrics.totalBlockingTime) {
      md += `| Total Blocking Time | ${Math.round(report.lighthouse.metrics.totalBlockingTime)}ms |\n`
    }
    if (report.lighthouse.metrics.speedIndex) {
      md += `| Speed Index | ${(report.lighthouse.metrics.speedIndex / 1000).toFixed(2)}s |\n`
    }
    if (report.lighthouse.metrics.timeToInteractive) {
      md += `| Time to Interactive | ${(report.lighthouse.metrics.timeToInteractive / 1000).toFixed(2)}s |\n`
    }
    md += `\n---\n\n`
  }

  // AI Advice Section
  md += `## AI-Powered Recommendations\n\n`

  // Top Issues
  if (report.aiAdvice.top_issues.length > 0) {
    md += `### Top Issues\n\n`
    for (const issue of report.aiAdvice.top_issues) {
      md += `#### ${issue.issue} (Impact: ${issue.impact})\n\n`
      md += `**Why:** ${issue.why}\n\n`
      md += `**Fix:** ${issue.fix}\n\n`
    }
  }

  // Quick Wins
  if (report.aiAdvice.quick_wins.length > 0) {
    md += `### Quick Wins\n\n`
    for (const win of report.aiAdvice.quick_wins) {
      md += `- ${win}\n`
    }
    md += `\n`
  }

  // Prioritized Actions
  if (report.aiAdvice.prioritized_actions.length > 0) {
    md += `### Prioritized Actions\n\n`
    report.aiAdvice.prioritized_actions.forEach((action, idx) => {
      md += `${idx + 1}. ${action}\n`
    })
    md += `\n`
  }

  // Rewrite Suggestions
  md += `---\n\n`
  md += `## Suggested Rewrites\n\n`

  if (report.aiAdvice.rewrite_suggestions.title) {
    md += `**Title:**\n\`\`\`\n${report.aiAdvice.rewrite_suggestions.title}\n\`\`\`\n\n`
  }

  if (report.aiAdvice.rewrite_suggestions.meta_description) {
    md += `**Meta Description:**\n\`\`\`\n${report.aiAdvice.rewrite_suggestions.meta_description}\n\`\`\`\n\n`
  }

  md += `---\n\n`
  md += `*Report generated by SEO Snap*\n`

  return md
}
